// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: src/protos/Tipster/SocialService.proto

package Tipster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SocialService_CreateUser_FullMethodName         = "/protos.Tipster.SocialService/CreateUser"
	SocialService_GetUser_FullMethodName            = "/protos.Tipster.SocialService/GetUser"
	SocialService_UpdateUser_FullMethodName         = "/protos.Tipster.SocialService/UpdateUser"
	SocialService_DeleteUser_FullMethodName         = "/protos.Tipster.SocialService/DeleteUser"
	SocialService_ListUsers_FullMethodName          = "/protos.Tipster.SocialService/ListUsers"
	SocialService_FollowTipster_FullMethodName      = "/protos.Tipster.SocialService/FollowTipster"
	SocialService_UnfollowTipster_FullMethodName    = "/protos.Tipster.SocialService/UnfollowTipster"
	SocialService_CreateTip_FullMethodName          = "/protos.Tipster.SocialService/CreateTip"
	SocialService_GetTip_FullMethodName             = "/protos.Tipster.SocialService/GetTip"
	SocialService_UpdateTip_FullMethodName          = "/protos.Tipster.SocialService/UpdateTip"
	SocialService_DeleteTip_FullMethodName          = "/protos.Tipster.SocialService/DeleteTip"
	SocialService_ListTips_FullMethodName           = "/protos.Tipster.SocialService/ListTips"
	SocialService_ShareTip_FullMethodName           = "/protos.Tipster.SocialService/ShareTip"
	SocialService_LikeTip_FullMethodName            = "/protos.Tipster.SocialService/LikeTip"
	SocialService_UnlikeTip_FullMethodName          = "/protos.Tipster.SocialService/UnlikeTip"
	SocialService_CommentOnTip_FullMethodName       = "/protos.Tipster.SocialService/CommentOnTip"
	SocialService_UpdateComment_FullMethodName      = "/protos.Tipster.SocialService/UpdateComment"
	SocialService_DeleteComment_FullMethodName      = "/protos.Tipster.SocialService/DeleteComment"
	SocialService_ListTipComments_FullMethodName    = "/protos.Tipster.SocialService/ListTipComments"
	SocialService_LikeComment_FullMethodName        = "/protos.Tipster.SocialService/LikeComment"
	SocialService_UnlikeComment_FullMethodName      = "/protos.Tipster.SocialService/UnlikeComment"
	SocialService_ReplyComment_FullMethodName       = "/protos.Tipster.SocialService/ReplyComment"
	SocialService_ListCommentReplies_FullMethodName = "/protos.Tipster.SocialService/ListCommentReplies"
	SocialService_ListComments_FullMethodName       = "/protos.Tipster.SocialService/ListComments"
	SocialService_ListFollowingFeed_FullMethodName  = "/protos.Tipster.SocialService/ListFollowingFeed"
)

// SocialServiceClient is the client API for SocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListUsers(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	FollowTipster(ctx context.Context, in *FollowTipsterRequest, opts ...grpc.CallOption) (*FollowTipsterResponse, error)
	UnfollowTipster(ctx context.Context, in *UnFollowTipsterRequest, opts ...grpc.CallOption) (*UnfollowTipsterResponse, error)
	CreateTip(ctx context.Context, in *CreateTipRequest, opts ...grpc.CallOption) (*CreateTipResponse, error)
	GetTip(ctx context.Context, in *GetTipRequest, opts ...grpc.CallOption) (*GetTipResponse, error)
	UpdateTip(ctx context.Context, in *UpdateTipRequest, opts ...grpc.CallOption) (*UpdateTipResponse, error)
	DeleteTip(ctx context.Context, in *DeleteTipRequest, opts ...grpc.CallOption) (*DeleteTipResponse, error)
	ListTips(ctx context.Context, in *ListTipsRequest, opts ...grpc.CallOption) (*ListTipsResponse, error)
	ShareTip(ctx context.Context, in *ShareTipRequest, opts ...grpc.CallOption) (*ShareTipResponse, error)
	LikeTip(ctx context.Context, in *LikeTipRequest, opts ...grpc.CallOption) (*LikeTipResponse, error)
	UnlikeTip(ctx context.Context, in *UnlikeTipRequest, opts ...grpc.CallOption) (*UnlikeTipResponse, error)
	CommentOnTip(ctx context.Context, in *CommentOnTipRequest, opts ...grpc.CallOption) (*CommentOnTipResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	ListTipComments(ctx context.Context, in *ListTipCommentsRequest, opts ...grpc.CallOption) (*ListTipCommentsResponse, error)
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error)
	UnlikeComment(ctx context.Context, in *UnlikeCommentRequest, opts ...grpc.CallOption) (*UnlikeCommentResponse, error)
	ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentResponse, error)
	ListCommentReplies(ctx context.Context, in *ListCommentRepliesRequest, opts ...grpc.CallOption) (*ListCommentRepliesResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	ListFollowingFeed(ctx context.Context, in *ListFollowingFeedRequest, opts ...grpc.CallOption) (*ListFollowingFeedResponse, error)
}

type socialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialServiceClient(cc grpc.ClientConnInterface) SocialServiceClient {
	return &socialServiceClient{cc}
}

func (c *socialServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, SocialService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, SocialService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ListUsers(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, SocialService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowTipster(ctx context.Context, in *FollowTipsterRequest, opts ...grpc.CallOption) (*FollowTipsterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowTipsterResponse)
	err := c.cc.Invoke(ctx, SocialService_FollowTipster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UnfollowTipster(ctx context.Context, in *UnFollowTipsterRequest, opts ...grpc.CallOption) (*UnfollowTipsterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfollowTipsterResponse)
	err := c.cc.Invoke(ctx, SocialService_UnfollowTipster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateTip(ctx context.Context, in *CreateTipRequest, opts ...grpc.CallOption) (*CreateTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTipResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetTip(ctx context.Context, in *GetTipRequest, opts ...grpc.CallOption) (*GetTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTipResponse)
	err := c.cc.Invoke(ctx, SocialService_GetTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UpdateTip(ctx context.Context, in *UpdateTipRequest, opts ...grpc.CallOption) (*UpdateTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTipResponse)
	err := c.cc.Invoke(ctx, SocialService_UpdateTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteTip(ctx context.Context, in *DeleteTipRequest, opts ...grpc.CallOption) (*DeleteTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTipResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ListTips(ctx context.Context, in *ListTipsRequest, opts ...grpc.CallOption) (*ListTipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTipsResponse)
	err := c.cc.Invoke(ctx, SocialService_ListTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ShareTip(ctx context.Context, in *ShareTipRequest, opts ...grpc.CallOption) (*ShareTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareTipResponse)
	err := c.cc.Invoke(ctx, SocialService_ShareTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) LikeTip(ctx context.Context, in *LikeTipRequest, opts ...grpc.CallOption) (*LikeTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeTipResponse)
	err := c.cc.Invoke(ctx, SocialService_LikeTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UnlikeTip(ctx context.Context, in *UnlikeTipRequest, opts ...grpc.CallOption) (*UnlikeTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikeTipResponse)
	err := c.cc.Invoke(ctx, SocialService_UnlikeTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CommentOnTip(ctx context.Context, in *CommentOnTipRequest, opts ...grpc.CallOption) (*CommentOnTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentOnTipResponse)
	err := c.cc.Invoke(ctx, SocialService_CommentOnTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ListTipComments(ctx context.Context, in *ListTipCommentsRequest, opts ...grpc.CallOption) (*ListTipCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTipCommentsResponse)
	err := c.cc.Invoke(ctx, SocialService_ListTipComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_LikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UnlikeComment(ctx context.Context, in *UnlikeCommentRequest, opts ...grpc.CallOption) (*UnlikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikeCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_UnlikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_ReplyComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ListCommentReplies(ctx context.Context, in *ListCommentRepliesRequest, opts ...grpc.CallOption) (*ListCommentRepliesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentRepliesResponse)
	err := c.cc.Invoke(ctx, SocialService_ListCommentReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, SocialService_ListComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ListFollowingFeed(ctx context.Context, in *ListFollowingFeedRequest, opts ...grpc.CallOption) (*ListFollowingFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowingFeedResponse)
	err := c.cc.Invoke(ctx, SocialService_ListFollowingFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServiceServer is the server API for SocialService service.
// All implementations must embed UnimplementedSocialServiceServer
// for forward compatibility.
type SocialServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListUsers(context.Context, *ListUserRequest) (*ListUserResponse, error)
	FollowTipster(context.Context, *FollowTipsterRequest) (*FollowTipsterResponse, error)
	UnfollowTipster(context.Context, *UnFollowTipsterRequest) (*UnfollowTipsterResponse, error)
	CreateTip(context.Context, *CreateTipRequest) (*CreateTipResponse, error)
	GetTip(context.Context, *GetTipRequest) (*GetTipResponse, error)
	UpdateTip(context.Context, *UpdateTipRequest) (*UpdateTipResponse, error)
	DeleteTip(context.Context, *DeleteTipRequest) (*DeleteTipResponse, error)
	ListTips(context.Context, *ListTipsRequest) (*ListTipsResponse, error)
	ShareTip(context.Context, *ShareTipRequest) (*ShareTipResponse, error)
	LikeTip(context.Context, *LikeTipRequest) (*LikeTipResponse, error)
	UnlikeTip(context.Context, *UnlikeTipRequest) (*UnlikeTipResponse, error)
	CommentOnTip(context.Context, *CommentOnTipRequest) (*CommentOnTipResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	ListTipComments(context.Context, *ListTipCommentsRequest) (*ListTipCommentsResponse, error)
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error)
	UnlikeComment(context.Context, *UnlikeCommentRequest) (*UnlikeCommentResponse, error)
	ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentResponse, error)
	ListCommentReplies(context.Context, *ListCommentRepliesRequest) (*ListCommentRepliesResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	ListFollowingFeed(context.Context, *ListFollowingFeedRequest) (*ListFollowingFeedResponse, error)
	mustEmbedUnimplementedSocialServiceServer()
}

// UnimplementedSocialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocialServiceServer struct{}

func (UnimplementedSocialServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSocialServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedSocialServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSocialServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSocialServiceServer) ListUsers(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedSocialServiceServer) FollowTipster(context.Context, *FollowTipsterRequest) (*FollowTipsterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowTipster not implemented")
}
func (UnimplementedSocialServiceServer) UnfollowTipster(context.Context, *UnFollowTipsterRequest) (*UnfollowTipsterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowTipster not implemented")
}
func (UnimplementedSocialServiceServer) CreateTip(context.Context, *CreateTipRequest) (*CreateTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTip not implemented")
}
func (UnimplementedSocialServiceServer) GetTip(context.Context, *GetTipRequest) (*GetTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTip not implemented")
}
func (UnimplementedSocialServiceServer) UpdateTip(context.Context, *UpdateTipRequest) (*UpdateTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTip not implemented")
}
func (UnimplementedSocialServiceServer) DeleteTip(context.Context, *DeleteTipRequest) (*DeleteTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTip not implemented")
}
func (UnimplementedSocialServiceServer) ListTips(context.Context, *ListTipsRequest) (*ListTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTips not implemented")
}
func (UnimplementedSocialServiceServer) ShareTip(context.Context, *ShareTipRequest) (*ShareTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareTip not implemented")
}
func (UnimplementedSocialServiceServer) LikeTip(context.Context, *LikeTipRequest) (*LikeTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTip not implemented")
}
func (UnimplementedSocialServiceServer) UnlikeTip(context.Context, *UnlikeTipRequest) (*UnlikeTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTip not implemented")
}
func (UnimplementedSocialServiceServer) CommentOnTip(context.Context, *CommentOnTipRequest) (*CommentOnTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentOnTip not implemented")
}
func (UnimplementedSocialServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedSocialServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedSocialServiceServer) ListTipComments(context.Context, *ListTipCommentsRequest) (*ListTipCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTipComments not implemented")
}
func (UnimplementedSocialServiceServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedSocialServiceServer) UnlikeComment(context.Context, *UnlikeCommentRequest) (*UnlikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeComment not implemented")
}
func (UnimplementedSocialServiceServer) ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedSocialServiceServer) ListCommentReplies(context.Context, *ListCommentRepliesRequest) (*ListCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentReplies not implemented")
}
func (UnimplementedSocialServiceServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedSocialServiceServer) ListFollowingFeed(context.Context, *ListFollowingFeedRequest) (*ListFollowingFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowingFeed not implemented")
}
func (UnimplementedSocialServiceServer) mustEmbedUnimplementedSocialServiceServer() {}
func (UnimplementedSocialServiceServer) testEmbeddedByValue()                       {}

// UnsafeSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServiceServer will
// result in compilation errors.
type UnsafeSocialServiceServer interface {
	mustEmbedUnimplementedSocialServiceServer()
}

func RegisterSocialServiceServer(s grpc.ServiceRegistrar, srv SocialServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocialService_ServiceDesc, srv)
}

func _SocialService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ListUsers(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowTipster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowTipsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowTipster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_FollowTipster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowTipster(ctx, req.(*FollowTipsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UnfollowTipster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowTipsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UnfollowTipster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UnfollowTipster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UnfollowTipster(ctx, req.(*UnFollowTipsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateTip(ctx, req.(*CreateTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetTip(ctx, req.(*GetTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UpdateTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UpdateTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UpdateTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UpdateTip(ctx, req.(*UpdateTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteTip(ctx, req.(*DeleteTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ListTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ListTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ListTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ListTips(ctx, req.(*ListTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ShareTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ShareTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ShareTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ShareTip(ctx, req.(*ShareTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_LikeTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).LikeTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_LikeTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).LikeTip(ctx, req.(*LikeTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UnlikeTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UnlikeTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UnlikeTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UnlikeTip(ctx, req.(*UnlikeTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CommentOnTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentOnTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CommentOnTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CommentOnTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CommentOnTip(ctx, req.(*CommentOnTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ListTipComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTipCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ListTipComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ListTipComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ListTipComments(ctx, req.(*ListTipCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UnlikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UnlikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UnlikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UnlikeComment(ctx, req.(*UnlikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReplyComment(ctx, req.(*ReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ListCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ListCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ListCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ListCommentReplies(ctx, req.(*ListCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ListFollowingFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowingFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ListFollowingFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ListFollowingFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ListFollowingFeed(ctx, req.(*ListFollowingFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialService_ServiceDesc is the grpc.ServiceDesc for SocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Tipster.SocialService",
	HandlerType: (*SocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _SocialService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _SocialService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SocialService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SocialService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _SocialService_ListUsers_Handler,
		},
		{
			MethodName: "FollowTipster",
			Handler:    _SocialService_FollowTipster_Handler,
		},
		{
			MethodName: "UnfollowTipster",
			Handler:    _SocialService_UnfollowTipster_Handler,
		},
		{
			MethodName: "CreateTip",
			Handler:    _SocialService_CreateTip_Handler,
		},
		{
			MethodName: "GetTip",
			Handler:    _SocialService_GetTip_Handler,
		},
		{
			MethodName: "UpdateTip",
			Handler:    _SocialService_UpdateTip_Handler,
		},
		{
			MethodName: "DeleteTip",
			Handler:    _SocialService_DeleteTip_Handler,
		},
		{
			MethodName: "ListTips",
			Handler:    _SocialService_ListTips_Handler,
		},
		{
			MethodName: "ShareTip",
			Handler:    _SocialService_ShareTip_Handler,
		},
		{
			MethodName: "LikeTip",
			Handler:    _SocialService_LikeTip_Handler,
		},
		{
			MethodName: "UnlikeTip",
			Handler:    _SocialService_UnlikeTip_Handler,
		},
		{
			MethodName: "CommentOnTip",
			Handler:    _SocialService_CommentOnTip_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _SocialService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _SocialService_DeleteComment_Handler,
		},
		{
			MethodName: "ListTipComments",
			Handler:    _SocialService_ListTipComments_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _SocialService_LikeComment_Handler,
		},
		{
			MethodName: "UnlikeComment",
			Handler:    _SocialService_UnlikeComment_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _SocialService_ReplyComment_Handler,
		},
		{
			MethodName: "ListCommentReplies",
			Handler:    _SocialService_ListCommentReplies_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _SocialService_ListComments_Handler,
		},
		{
			MethodName: "ListFollowingFeed",
			Handler:    _SocialService_ListFollowingFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/protos/Tipster/SocialService.proto",
}
