// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: YM.Transaction/OrderService.proto

package transactionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	YM_Common "src/protos/YM.Common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateOrder_FullMethodName             = "/YM.Transaction.OrderService/CreateOrder"
	OrderService_CreateOrderPayment_FullMethodName      = "/YM.Transaction.OrderService/CreateOrderPayment"
	OrderService_UpdatePayment_FullMethodName           = "/YM.Transaction.OrderService/UpdatePayment"
	OrderService_UpdatePaymentResult_FullMethodName     = "/YM.Transaction.OrderService/UpdatePaymentResult"
	OrderService_GetOrderByPlatformId_FullMethodName    = "/YM.Transaction.OrderService/GetOrderByPlatformId"
	OrderService_GetOrderById_FullMethodName            = "/YM.Transaction.OrderService/GetOrderById"
	OrderService_AddTransactionRecord_FullMethodName    = "/YM.Transaction.OrderService/AddTransactionRecord"
	OrderService_GetOrdersByMember_FullMethodName       = "/YM.Transaction.OrderService/GetOrdersByMember"
	OrderService_GetTransactionById_FullMethodName      = "/YM.Transaction.OrderService/GetTransactionById"
	OrderService_GetTransactionByOrderId_FullMethodName = "/YM.Transaction.OrderService/GetTransactionByOrderId"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	CreateOrderPayment(ctx context.Context, in *CreateOrderPaymentRequest, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error)
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error)
	UpdatePaymentResult(ctx context.Context, in *UpdatePaymentResultRequest, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error)
	GetOrderByPlatformId(ctx context.Context, in *SearchOrderByPlatformId, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetOrderById(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// 記錄每筆invoice的狀態改變記錄 (將來會在後台查詢)
	// 這支api需要同時更新
	// - Transaction (upsert)
	//   - Status
	//   - PeriodStart
	//   - PeriodEnd
	//
	// - TransactionLog (insert)
	// - Order (update)
	//   - CurrentPeriodStart
	//   - CurrentPeriodEnd
	AddTransactionRecord(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error)
	// 供後台使用
	GetOrdersByMember(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetTransactionById(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetTransactionByOrderId(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderPayment(ctx context.Context, in *CreateOrderPaymentRequest, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YM_Common.ResponseBase)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YM_Common.ResponseBase)
	err := c.cc.Invoke(ctx, OrderService_UpdatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdatePaymentResult(ctx context.Context, in *UpdatePaymentResultRequest, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YM_Common.ResponseBase)
	err := c.cc.Invoke(ctx, OrderService_UpdatePaymentResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByPlatformId(ctx context.Context, in *SearchOrderByPlatformId, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderByPlatformId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderById(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddTransactionRecord(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*YM_Common.ResponseBase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YM_Common.ResponseBase)
	err := c.cc.Invoke(ctx, OrderService_AddTransactionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByMember(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrdersByMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetTransactionById(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, OrderService_GetTransactionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetTransactionByOrderId(ctx context.Context, in *YM_Common.PKeyString, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, OrderService_GetTransactionByOrderId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	CreateOrder(context.Context, *OrderInfo) (*CreateOrderResponse, error)
	CreateOrderPayment(context.Context, *CreateOrderPaymentRequest) (*YM_Common.ResponseBase, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*YM_Common.ResponseBase, error)
	UpdatePaymentResult(context.Context, *UpdatePaymentResultRequest) (*YM_Common.ResponseBase, error)
	GetOrderByPlatformId(context.Context, *SearchOrderByPlatformId) (*GetOrderResponse, error)
	GetOrderById(context.Context, *YM_Common.PKeyString) (*GetOrderResponse, error)
	// 記錄每筆invoice的狀態改變記錄 (將來會在後台查詢)
	// 這支api需要同時更新
	// - Transaction (upsert)
	//   - Status
	//   - PeriodStart
	//   - PeriodEnd
	//
	// - TransactionLog (insert)
	// - Order (update)
	//   - CurrentPeriodStart
	//   - CurrentPeriodEnd
	AddTransactionRecord(context.Context, *TransactionInfo) (*YM_Common.ResponseBase, error)
	// 供後台使用
	GetOrdersByMember(context.Context, *YM_Common.PKeyString) (*GetOrdersResponse, error)
	GetTransactionById(context.Context, *YM_Common.PKeyString) (*GetTransactionResponse, error)
	GetTransactionByOrderId(context.Context, *YM_Common.PKeyString) (*GetTransactionsResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *OrderInfo) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderPayment(context.Context, *CreateOrderPaymentRequest) (*YM_Common.ResponseBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPayment not implemented")
}
func (UnimplementedOrderServiceServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*YM_Common.ResponseBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedOrderServiceServer) UpdatePaymentResult(context.Context, *UpdatePaymentResultRequest) (*YM_Common.ResponseBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentResult not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByPlatformId(context.Context, *SearchOrderByPlatformId) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByPlatformId not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderById(context.Context, *YM_Common.PKeyString) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderServiceServer) AddTransactionRecord(context.Context, *TransactionInfo) (*YM_Common.ResponseBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransactionRecord not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByMember(context.Context, *YM_Common.PKeyString) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByMember not implemented")
}
func (UnimplementedOrderServiceServer) GetTransactionById(context.Context, *YM_Common.PKeyString) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedOrderServiceServer) GetTransactionByOrderId(context.Context, *YM_Common.PKeyString) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByOrderId not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*OrderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderPayment(ctx, req.(*CreateOrderPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdatePaymentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdatePaymentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdatePaymentResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdatePaymentResult(ctx, req.(*UpdatePaymentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByPlatformId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrderByPlatformId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByPlatformId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderByPlatformId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByPlatformId(ctx, req.(*SearchOrderByPlatformId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YM_Common.PKeyString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderById(ctx, req.(*YM_Common.PKeyString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddTransactionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddTransactionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddTransactionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddTransactionRecord(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YM_Common.PKeyString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrdersByMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByMember(ctx, req.(*YM_Common.PKeyString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YM_Common.PKeyString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetTransactionById(ctx, req.(*YM_Common.PKeyString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetTransactionByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YM_Common.PKeyString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetTransactionByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetTransactionByOrderId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetTransactionByOrderId(ctx, req.(*YM_Common.PKeyString))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YM.Transaction.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "CreateOrderPayment",
			Handler:    _OrderService_CreateOrderPayment_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _OrderService_UpdatePayment_Handler,
		},
		{
			MethodName: "UpdatePaymentResult",
			Handler:    _OrderService_UpdatePaymentResult_Handler,
		},
		{
			MethodName: "GetOrderByPlatformId",
			Handler:    _OrderService_GetOrderByPlatformId_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderService_GetOrderById_Handler,
		},
		{
			MethodName: "AddTransactionRecord",
			Handler:    _OrderService_AddTransactionRecord_Handler,
		},
		{
			MethodName: "GetOrdersByMember",
			Handler:    _OrderService_GetOrdersByMember_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _OrderService_GetTransactionById_Handler,
		},
		{
			MethodName: "GetTransactionByOrderId",
			Handler:    _OrderService_GetTransactionByOrderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "YM.Transaction/OrderService.proto",
}
